
Search
  
Python
BeginnersGuide
BeginnersGuide
FrontPage
RecentChanges
FindPage
HelpContents
BeginnersGuide
Page
Immutable Page
Comments
Info
Attachments

More Actions:
User
Login
Beginner's Guide to Python
New to programming? Python is free and easy to learn if you know where to start! This guide will help you to get started quickly.

Chinese Translation/中文版入门

New to Python?
Read BeginnersGuide/Overview for a short explanation of what Python is.

Getting Python
Next, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python.

There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments.

At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations.

Learning Python
Next, read a tutorial and try some simple experiments with your new Python interpreter.

If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials.

If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials.

If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources.

Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows.

Here are some sites that focus on beginners and offer in-browser coding:


Beginners Python tutorial at Python Land (free)

Codédex (non-free)


Coding Bootcamps (non-free)

DataCamp (non-free)

Dataquest for Python for data science. (free)

HackInScience free and open source platform.

High School Technology Services for general Python (non-free)

Print a cheat sheet of the most important Python features and post it to your office wall until you know the basics well.

Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax.

When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions.

This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python.

Need Help?
Need help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups.

Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles.

Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn.

Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers.

Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university.

Complete list of Beginner's Guide pages
BeginnersGuide/Download
BeginnersGuide/Examples
BeginnersGuide/Help
BeginnersGuide/Mathematics
BeginnersGuide/NonProgrammers
BeginnersGuide/NonProgrammersChinese
BeginnersGuide/Overview
BeginnersGuide/OverviewChinese
BeginnersGuide/Programmers
BeginnersGuide/Programmers (Cpp2Python.pdf)
BeginnersGuide/Programmers/SimpleExamples
Quiz and Exercises
Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle

CheckIO - Online learning, testing and improving your python skills

After Hours Programming - Python Quiz

PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners

Pythonspot - Python Quiz

Python Challenge - A Python Quiz App on Android Platform

CS Circles - online lessons and graded exercises

Python Style Checker
Pythonchecker.com - An educative online tool to rate your Python style (with dynamic score computation and hints)

Looking for a particular Python module or application?
The first place to look is the Python Package Index.

If you can't find anything relevant in the Package Index,
try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search.

You may also try our external guest project, pydoc.net, for advanced package and module search.

Next, try Google or another search engine of your choice. Searching for "python" and some relevant keywords will usually find something helpful.

Finally, you can try posting a query to the comp.lang.python Usenet group.
Python-Related Cheat Sheets
Python: Collection of 11 Best Python Cheat Sheets

NumPy: Collection of 10 Best NumPy Cheat Sheets

Pandas: Collection of 7 Beautiful Pandas Cheat Sheets

Machine Learning: Collection of 15 Machine Learning Cheat Sheets

Want to contribute?
Python is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal.

To report a bug in the Python core, use the Python Bug Tracker.

To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process.

To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch.

To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information.

To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines.

If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.

CategoryDocumentation

BeginnersGuide (last edited 2023-08-29 20:15:52 by eriky)
MoinMoin PoweredPython PoweredGPL licensedValid HTML 4.01
Unable to edit the page? See the FrontPage for instructions.
Python is a clear and powerful object-oriented programming language, comparable to Perl, Ruby, Scheme, or Java.

Some of Python's notable features:

Uses an elegant syntax, making the programs you write easier to read.
Is an easy-to-use language that makes it simple to get your program working. This makes Python ideal for prototype development and other ad-hoc programming tasks, without compromising maintainability.
Comes with a large standard library that supports many common programming tasks such as connecting to web servers, searching text with regular expressions, reading and modifying files.
Python's interactive mode makes it easy to test short snippets of code. There's also a bundled development environment called IDLE.
Is easily extended by adding new modules implemented in a compiled language such as C or C++.
Can also be embedded into an application to provide a programmable interface.
Runs anywhere, including Mac OS X, Windows, Linux, and Unix, with unofficial builds also available for Android and iOS.

Is free software in two senses. It doesn't cost anything to download or use Python, or to include it in your application. Python can also be freely modified and re-distributed because while the language is copyrighted it's available under an open-source license.

Some programming-language features of Python are:

A variety of basic data types are available: numbers (floating point, complex, and unlimited-length long integers), strings (both ASCII and Unicode), lists, and dictionaries.
Python supports object-oriented programming with classes and multiple inheritances.
Code can be grouped into modules and packages.
The language supports raising and catching exceptions, resulting in cleaner error handling.
Data types are strongly and dynamically typed. Mixing incompatible types (e.g. attempting to add a string and a number) causes an exception to be raised, so errors are caught sooner.
Python contains advanced programming features such as generators and list comprehensions.
Python's automatic memory management frees you from having to manually allocate and free memory in your code.
See the SimplePrograms collection of short programs, gradually increasing in length, which shows off Python's syntax and readability.

Writing Pythonic code is not hard---but you have to get used to the (PEP) code style rules. You can test, check, and improve your code style at online resources such as Pythonchecker.com.

Translations:
Help for Beginners
A WikiWikiWeb is a collaborative hypertext environment, with an emphasis on easy access to and modification of information.

You can edit any page by pressing the "edit" link. Depending on the selected user interface theme you may find this at the top, in the sidebar area or at the bottom of the page. Capitalized words joined together form a WikiName, which hyperlinks to another page. Clicking on the highlighted title searches for all pages that link to the current page. Links to pages which do not yet exist have different text color (usually gray) or have a question mark; just follow the link and you can add a definition. That is also the way to create a new page: add a new WikiName to an existing page, save your modification, click on your new link and create the page (more details on HelpOnPageCreation).

You are encouraged to edit the WikiSandBox whichever way you like. Please restrain yourself from editing other pages until you feel at home with the ways a wiki works.

To learn more about what a WikiWikiWeb is, read about WhyWikiWorks and the WikiNature. Also, consult the WikiWikiWebFaq and OneMinuteWiki. This wiki is also part of the InterWiki space, which means you can easily refer to a wealth of information available through other public wiki sites.

Good starting points to explore a wiki are

RecentChanges: see where people are currently working

FindPage: find some content or explore the wiki

WikiSandBox: feel free to change this page and experiment with editing

HelpOnEditing: the starting point to learn everything about wiki markup

For more help, see the HelpContents and the HelpIndex pages.